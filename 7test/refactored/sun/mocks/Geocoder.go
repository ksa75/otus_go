// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Geocoder is an autogenerated mock type for the Geocoder type
type Geocoder struct {
	mock.Mock
}

type Geocoder_Expecter struct {
	mock *mock.Mock
}

func (_m *Geocoder) EXPECT() *Geocoder_Expecter {
	return &Geocoder_Expecter{mock: &_m.Mock}
}

// GetCoordsByName provides a mock function with given fields: city
func (_m *Geocoder) GetCoordsByName(city string) (float64, float64, error) {
	ret := _m.Called(city)

	if len(ret) == 0 {
		panic("no return value specified for GetCoordsByName")
	}

	var r0 float64
	var r1 float64
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (float64, float64, error)); ok {
		return rf(city)
	}
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(city)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string) float64); ok {
		r1 = rf(city)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(city)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Geocoder_GetCoordsByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoordsByName'
type Geocoder_GetCoordsByName_Call struct {
	*mock.Call
}

// GetCoordsByName is a helper method to define mock.On call
//   - city string
func (_e *Geocoder_Expecter) GetCoordsByName(city interface{}) *Geocoder_GetCoordsByName_Call {
	return &Geocoder_GetCoordsByName_Call{Call: _e.mock.On("GetCoordsByName", city)}
}

func (_c *Geocoder_GetCoordsByName_Call) Run(run func(city string)) *Geocoder_GetCoordsByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Geocoder_GetCoordsByName_Call) Return(latitude float64, longitude float64, err error) *Geocoder_GetCoordsByName_Call {
	_c.Call.Return(latitude, longitude, err)
	return _c
}

func (_c *Geocoder_GetCoordsByName_Call) RunAndReturn(run func(string) (float64, float64, error)) *Geocoder_GetCoordsByName_Call {
	_c.Call.Return(run)
	return _c
}

// NewGeocoder creates a new instance of Geocoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeocoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Geocoder {
	mock := &Geocoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
